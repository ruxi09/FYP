boost::mpl::if_ 

https://www.boost.org/doc/libs/1_79_0/libs/mpl/doc/refmanual/if.html 

A semi-static condition is a condition that is evaluated at compile-time rather
than at runtime. In C++, semi-static conditions are typically created using 
template metaprogramming, which allows you to use the C++ type system to 
perform operations at compile-time.

Semi-static conditions are often used to select one of two values or types 
based on a compile-time Boolean value. For example, you might use a semi-static
condition to select a specific type to use for a template parameter, or to 
select a particular implementation of a function based on a compile-time 
constant.

The Boost library provides a number of templates that can be used to create
semi-static conditions. One such template is the boost::mpl::if_ template,
which can be used to create a compile-time conditional expression that selects
one of two types based on a compile-time Boolean value.

-------------------------------------------------------------------------------
boost::contract::call_if

The Boost.Contract library is a library for design-by-contract programming in 
C++. It provides a set of macros and templates that can be used to define 
preconditions, postconditions, and invariants for a function, and to check 
these conditions at runtime.

The Boost.Contract library does not provide any functionality for modifying the
assembly code of a function or for calling a function based on a condition. If
needed to modify the behavior of a function at runtime or to call a function
based on a condition, it may be useful to consider using other techniques, such
as function pointers or virtual functions

-------------------------------------------------------------------------------

It is generally not possible to modify the assembly code of a function at 
runtime in C++, as the assembly code of a function is typically generated by
the compiler and is not directly accessible to the programmer.

The Boost library provides a number of templates that can be used to create
semi-static conditions, such as the boost::mpl::if_ template.These templates
can be used to select one of two types or values based on a compile-time
Boolean value, but they do not have the ability to modify the assembly code of
a function at runtime.

If need to modify the behavior of a function at runtime, it may be useful to
consider using other techniques, such as function pointers or virtual functions
These techniques allows to change the behavior of a function by selecting a
different function to call at runtime, rather than modifying the assembly code
of the function itself.


